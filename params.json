{"tagline":"Keep track of complex cloud setups!","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Meister\r\n\r\nMeister is a CLI tool that aims to ease setting up a complex system of\r\nservers on a cloud hosting provider.  It works by creating a\r\n[yaml](http://www.yaml.org/) file that contains all configuration that\r\nyou want to provision to a cloud hosting provider. That file can then\r\nbe version controlled so that changes in the server stack are easily\r\noverviewed. When you're done with the file, just run **meister\r\nprovision** and the setup becomes a reality.\r\n\r\n# Installation\r\n    \r\n\t(sudo) python setup.py install\r\n\r\n# The meister.yml file\r\n\r\n    ---\r\n    # The management server is the main server.\r\n\t# A history of the meister.yml is stored here so that changes can be executed.\r\n    managementServer: mgmt\r\n\r\n    # The key file is the private key to use when connecting to new hosts.\r\n    keyFile: /path/to/keyfile\r\n\r\n    # Tasks can be executed on nodes. This could be for instance be installing puppet.\r\n    # All methods in the task file are exposed. Fabric is available for executing tasks on the machine.\r\n    taskModule: tasks\r\n\r\n    # The default user is used when connecting to nodes through ssh.\r\n\t# This can be overriden on node level by specifying the user property.\r\n    defaultUser: ubuntu\r\n\r\n    # The default key to use.\r\n    defaultKeyFile = /path/to/key\r\n\r\n    # The driver is used to create servers on the cloud hosting provider.\r\n    driver:\r\n        name: aws # Only aws is supported currently.\r\n        id: your-id # AWS id\r\n        key: your-key # AWS\r\n       region: your-region # The region, for instance eu-west-1\r\n       defaultSecurityGroup: group # The default security grups that nodes should belong to. This can be overriden by specifiying the securityGroup property.\r\n       defaultZone: eu-west-1a # The default AWS Zone.\r\n       defaultKeyName: example # Default key pair name. Create this keypair in the aws console first!\r\n\r\n    DNS:\r\n      name: Provider # Name of your provider, for instance route53\r\n      id: your-id # Route 53 id\r\n      key: your-key # Route 53 key\r\n      defaultZone: example.com. # The zone to use by default. All nodes will register their domains here if you don't specify another zone in the node definition.\r\n\r\n    # Security groups with firewall rules.\r\n    securityGroups:\r\n      group:\r\n        description: Group1 description\r\n        rules:\r\n            - ip: 10.10.1.1/32\r\n              fromPort: 8081\r\n              toPort: 8082\r\n            - ip: 0.0.0.0/0\r\n              fromPort: 22\r\n              toPort: 22\r\n\r\n        group2:\r\n            description: Group2 description\r\n            rules:\r\n                - ip: 0.0.0.0/0\r\n                  fromPort: 22\r\n                  toPort: 22\r\n\r\n    # The nodes to create.\r\n    nodes:\r\n        mgmt:\r\n            hostname: mgmt\r\n            size: t1.micro\r\n            diskSize: 20 # Size in GB. Defaults to 8gb\r\n            externalDNS: mgmt.example.com.\r\n            internalDNS: mgmt.internal.example.com.\r\n            image: ami-c1aaabb5\r\n            tasks: # Tasks are run when the node is first set up.\r\n              - install_puppet\r\n              - install_puppet_master\r\n        application1:\r\n            hostname: application1\r\n            size: t1.micro\r\n            image: ami-c1aaabb5\r\n            externalDNS: application1.example.com.\r\n            internalDNS: application1.internal.example.com.\r\n            tasks:\r\n                - install_puppet\r\n                - register_node\r\n         application2:\r\n             hostname: application2\r\n             size: t1.micro\r\n             externalDNS: application2.example.com. # Binds to external IP address\r\n             internalDNS: application2.internal.example.com. # Binds to internal IP address\r\n             image: ami-c1aaabb5\r\n             securityGroup: group2\r\n             tasks:\r\n                 - install_puppet\r\n                 - register_node\r\n\r\n\r\n\r\n# Usage\r\n\r\n1. Create a meister.yml file.\r\n3. Optionally create a python module with tasks that should be\r\nexecuted on the machine. Refer to the\r\n[Fabric documentation](http://docs.fabfile.org/en/1.5/) for more\r\ninfo.\r\n2. run meister provision:  \r\n\r\n\r\n\tmeister provision\r\n\r\n\r\n3. Verify that all machines are running on the aws console.\r\n\r\n\r\n# TODO\r\nThere are several things that still needs to be done:\r\n\r\n1. Proper error handling\r\n2. Nice looking CLI\r\n3. Commands for initializing and modifiyng the meister.yml file\r\n4. Be able to remove unused nodes after removing them from the meister.yml file\r\n5. Code refactoring to fit PEP 8 standards\r\n","name":"Meister","google":""}